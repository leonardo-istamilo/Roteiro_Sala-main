            Passos executados para correção do programa
 ---------------------------------------------------------------------------------------
// Estou fazendo capturas de tela para adicionar ao relatorio

1. Download Junit 5.8.1
2. Utilizando pilar da POO encapsulamento na classe Node.java (tornando atributos privados, add getters, setters, hashcode, toString e equals)
3. Modificando a sintaxe da classe "DoublyLinkedList.java" para aceitar o uso do emcapsulamento

Para relatorio:
1. Ao executar o teste inicial na classe main, notou-se que o método printBackward() não apresentou retorno, e o método printForward() não apresentou o resutado esperado (lista ordenada).
1.2. Deixando de lado o método printbackward(), por enquanto, e focando no método printForward() elaboramos duas hipóteses: O método insertOrdered() não está inserindo ordenado ou, o método printForward() está imprimindo desordenado.
1.3. Para testar as hipóteses anteriores, partimos para os testes unitário usando o Junit 5.8.1, onde encontramos um bug no método insertOrdered();
1.4. Bastou substituir current.next.data >= data por current.next.data <= data para resolver;
1.5. Foi testado na main para conferir rapidamente e o resoltado esperado foi alcançando.
2. Testando agora o método printBackward():
2.1. precisamos substituir "current != null" por "current.next != null" no primeiro while para impedir que o ultimo nó seja nulo, e, consequentemente, o segundo while não seja acessado, fazendo com o que os valores não sejam retornados a tela.
2.2. Percebe-mos um loop infinito e, ao debugar, nota-mos que o nó head está sendo chamado infinitas vezes
2.3.  Resolvemos adicionando um contador para descobrir o tamanho do array, no primeiro while, e substituimos o segundo while por um for que percorre o array do fim ao inicio.
2.5. Foram realizados testes unitários dos métodos printForward() e printBackward();

3.0. Testando método remove():
3.1. Segundo o teste unitário, o método não remove o primeiro elemento.
3.2. Para resolver // Substituimos "this.prev = this" por "this.prev = null"

OBS.: Com o passo anterior, anulamos o passo 2.3

3. Adicionamos teste unitários para:
     - Remoção em lista com apenas 1 elemento
     - Remoção de um elemento que não existe
     - Impressão em lista vazia
     - Inserção de elementos duplicados (dependendo do comportamento esperado)

3.1.

